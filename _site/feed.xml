<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Bryce McDonnell - All Posts</title>
		<description>All Posts At BryceMcDonnell.com</description>
		<link>http://www.brycemcdonnell.com</link>
		<atom:link href="http://www.brycemcdonnell.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Comparing Weather In Portland Oregon To New York City</title>
        <description>&lt;h1 id=&quot;comparing-weather-in-portland-oregon-to-new-york-city&quot;&gt;Comparing Weather In Portland Oregon To New York City&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;brycemcd&quot; data-size=&quot;large&quot; data-related=&quot;brycemcd&quot; data-text=&quot;Comparing weather data using ggplot in R&quot; data-count=&quot;none&quot; data-hashtags=&quot;rstats,weather&quot;&gt;Share This On Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently travelled back to my home town of Portland, Oregon and a
debate quickly broke out comparing the weather between where I live now
(New York City) and the Portland area. To settle the bet, quickly graphing a 
few seasons worth of data in R (of course!) was in order.&lt;/p&gt;

&lt;h2 id=&quot;the-approach&quot;&gt;The Approach&lt;/h2&gt;

&lt;p&gt;The main question that needed answering was &lt;strong&gt;How Similar are the
temperatures of Portland and New York?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using ggplot to show the last few seasons of high and low temperatures should
quickly get us a visual comparison of the two areas and allow us to draw
inferences of similarity.&lt;/p&gt;

&lt;h2 id=&quot;the-data&quot;&gt;The Data&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ncdc.noaa.gov/cdo-web/search&quot;&gt;NOAA has a very accessible climate data repository&lt;/a&gt;.
It’s free to use and request and the level of detail is pretty
remarkable.&lt;/p&gt;

&lt;p&gt;I ordered a data set to include daily temperature and precipitation data
from 2012 to present (July 2015).&lt;/p&gt;

&lt;h2 id=&quot;the-analysis&quot;&gt;The Analysis&lt;/h2&gt;

&lt;p&gt;All the code is &lt;a href=&quot;#the-whole-analysis&quot;&gt;at the bottom of this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The data was ready for download in a few hours and was easily imported
into R. The data was clean and very little had to be done to prepare it
for graphing. For convenience, I created a temperature conversion function
and reset the TMAX and TMIN columns to read in Celcius rather than
tenths of degrees in Celcius.&lt;/p&gt;

&lt;p&gt;To get a good look at the daily temperatures, I used a ribbon plot.
Ribbon plots are great for showing a range of trending data. It was
famously used in &lt;a href=&quot;http://www.edwardtufte.com/tufte/graphics/minard_lg.gif&quot;&gt;Edward Tufte’s visual representation of Napoleon’s
march to
Moscow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since this is a visual analysis, the easiest thing to do is to graph the
temperature data simultaneously and visually observe any differences.
The first graph I produced was:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/bme-blog/weather_comparison_pdx_to_nyc.png&quot; alt=&quot;temperature graph of Portland, Or and New York City, NY&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Blue is New York City and green is Portland Oregon.&lt;/p&gt;

&lt;p&gt;A few observations immediately jump out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is quite a bit of overlap in the temperatures of the two cities&lt;/li&gt;
  &lt;li&gt;Portland does not get as cold in the winter&lt;/li&gt;
  &lt;li&gt;Portland’s low temperatures in the summer are much lower than NYC but
the highs are fairly similar.&lt;/li&gt;
  &lt;li&gt;This last winter in NYC sucked. I’m pretty sure that was a scientific
fact prior to this analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This graph allowed us to conclude that the temperatures of the two
locations are fairly similar during the spring and fall and the largest
differences exist in the summer and winter (when the temperatures are
highest and lowest). It seems that Portland provides respite from the
heat at night while New Yorkers continue to suffer all day and night.&lt;/p&gt;

&lt;p&gt;To confirm or reject this newfound observation, we could graph the
intra-day &lt;em&gt;range&lt;/em&gt; of the temperatures throughout the year and compare
the &lt;em&gt;difference of the ranges&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There’s a bit of nuance in the last statement. The range of the daily
temperature is found by subtracting the day’s high from the day’s low.
This produces a daily range of temperature. We can then subtract one
city’s range from another to produce a comparison of each day’s
temperature range. If Portland truly gets colder at night after a
similar daily high temperature then the range of temperature in Portland
will be higher. Subtracting Portland’s range from New York’s will
produce a result much higher than 0 if Portland does indeed get cooler
at night. :+1: for math!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/bme-blog/difference_in_range.png&quot; alt=&quot;difference in ranges&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The individual daily range is pretty noisy, but a smoother can be
applied to show the general seasonal differences.&lt;/p&gt;

&lt;p&gt;For the last three years, the temperature ranges in Portland and New
York are pretty similar &lt;em&gt;expcept&lt;/em&gt; during the summer. The difference in
ranges are pretty close to zero until summer when Portland fluctuates by
around 7 degrees. This year (2015) has the highest fluctuations.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All in all, the temperatures in New York and Portland are pretty
similar. The biggest differences occur during the summer when New York
refuses to cool off at night.&lt;/p&gt;

&lt;p&gt;This was a fun chance to play around with the ribbon plot and do
graphical analysis.&lt;/p&gt;

&lt;h2 id=&quot;the-whole-analysis&quot;&gt;The Whole Analysis&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/brycemcd/8a46239172271019f81e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;brycemcd&quot; data-size=&quot;large&quot; data-related=&quot;brycemcd&quot; data-text=&quot;Comparing weather data using ggplot in R&quot; data-count=&quot;none&quot; data-hashtags=&quot;rstats,weather&quot;&gt;Share This On Twitter&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 20 Jul 2015 00:00:00 -0400</pubDate>
				<link>http://www.brycemcdonnell.com/data-science/2015/07/20/comparing-weather-in-portland-oregon-to-new-york-city.html?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</link>
				<guid isPermaLink="true">http://www.brycemcdonnell.com/data-science/2015/07/20/comparing-weather-in-portland-oregon-to-new-york-city.html?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</guid>
			</item>
		
			<item>
				<title>Plotting User Retention Curves In R</title>
        <description>&lt;h1 id=&quot;plotting-user-retention-curves-in-r&quot;&gt;Plotting User Retention Curves In R&lt;/h1&gt;

&lt;p&gt;This post was inspired by Dan Croak (&lt;a href=&quot;https://twitter.com/Croaky&quot;&gt;@croaky&lt;/a&gt;)
 over at &lt;a href=&quot;https://robots.thoughtbot.com/create-a-retention-curve-with-mixpanel-and-google-sheets&quot;&gt;The Giant Robots Blog&lt;/a&gt;.
His approach to user retention is spot-on and his walk through for user
retention graphs are very useful for building a consumer facing product.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/brycemcd/status/617433218627858432&quot;&gt;I tweeted&lt;/a&gt; that
a user retention curve is easier to explain to other people in the
business in a way that is actionable.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Create a Retention Curve with Mixpanel and Google Sheets -
much easier to grok than the waterfall charts imho &lt;a href=&quot;https://t.co/NvWfUFfHSV&quot;&gt;https://t.co/NvWfUFfHSV&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Bryce (@brycemcd) &lt;a href=&quot;https://twitter.com/brycemcd/status/617433218627858432&quot;&gt;July 4,
2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Taking this one step further, I think that building such a curve should
be mindless to generate. Dan’s tutorial was straightforward but making
it automatic will decrease the time to generate the graph. Making a user
retention graph a no-brainer will make it much more likely that it gets
generated at a regular interval and shared with other people in the
business. In particular, manually changing the colors and building a
graph in Google Sheets is fairly arduous.&lt;/p&gt;

&lt;h2 id=&quot;moar-automation&quot;&gt;MOAR AUTOMATION&lt;/h2&gt;

&lt;p&gt;Dan’s (and now my) goal of producing user retention curves can be better
automated. All it takes is R (or RStudio) and the downloaded csv from
Mixpanel (see Dan’s post for the format of the csv).&lt;/p&gt;

&lt;p&gt;After about an hour of playing (yes, it was super fun) in R, the process
can be better automated with &lt;a href=&quot;https://gist.github.com/brycemcd/5d6c9e77cd8597ff7027&quot;&gt;this
gist&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/brycemcd/5d6c9e77cd8597ff7027.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The script produces the following graphs (click to zoom in):&lt;/p&gt;

&lt;h3 id=&quot;all-data&quot;&gt;All Data&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://s3-us-west-2.amazonaws.com/bme-blog/retention-all.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://s3-us-west-2.amazonaws.com/bme-blog/retention-all.png&quot; width=&quot;100%&quot; alt=&quot;User Retention - All&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;filtered-data&quot;&gt;Filtered Data&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://s3-us-west-2.amazonaws.com/bme-blog/retention-filtered.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://s3-us-west-2.amazonaws.com/bme-blog/retention-filtered.png&quot; width=&quot;100%&quot; alt=&quot;User Retention - filtered&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;X0.weeks.later&lt;/code&gt; isn’t that interesting for this product. So,
it can be cut out by simply subsetting the data:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;retention %&amp;gt;% filter(t != &#39;X0.weeks.later&#39; &amp;amp; weeks_ago != 27)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;The next step is to automatically pull the data into R from the Mixpanel
API. It should be relatively straightforward.&lt;/p&gt;

&lt;p&gt;This script is certainly going to be useful to me as we continue to
build &lt;a href=&quot;https://www.cricketscircle.com&quot;&gt;Cricket’s Circle&lt;/a&gt;. I hope it’s
useful for you as you’re building whatever web or native product you’re
building. Let me know what you’re working on and, as always,
improvements are always welcome. Thanks Dan for the inspiration.&lt;/p&gt;
</description>
				<pubDate>Sun, 05 Jul 2015 00:00:00 -0400</pubDate>
				<link>http://www.brycemcdonnell.com/plotting-user-retention-curves-in-R?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</link>
				<guid isPermaLink="true">http://www.brycemcdonnell.com/plotting-user-retention-curves-in-R?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</guid>
			</item>
		
			<item>
				<title>Detecting Duplicate Entries In Offerpop Campaign</title>
        <description>&lt;h1 id=&quot;detecting-duplicate-entries-in-offerpop-campaigns&quot;&gt;Detecting Duplicate Entries in OfferPop Campaigns&lt;/h1&gt;

&lt;p&gt;I wound up having to do some anomaly detection for a giveaway campaign that recently completed.
By all accounts it was really successful! Sadly, some people didn’t play
by the rules and entered many more times than once. One person entered
more than 2000 times!&lt;/p&gt;

&lt;p&gt;Below is a simple bash script to detect a fairly high percentage of fraudulent
entries in just under a second:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/brycemcd/de6ef86346d035858164.js&quot;&gt;&lt;/script&gt;

</description>
				<pubDate>Tue, 12 May 2015 00:00:00 -0400</pubDate>
				<link>http://www.brycemcdonnell.com/development/2015/05/12/detecting-duplicate-entries-in-offerpop-campaign.html?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</link>
				<guid isPermaLink="true">http://www.brycemcdonnell.com/development/2015/05/12/detecting-duplicate-entries-in-offerpop-campaign.html?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</guid>
			</item>
		
			<item>
				<title>Textmate Bundle For Asterisk Telephony</title>
        <description>&lt;p&gt;I’ve been getting more and more familiar with Asterisk I’ve been
blindly editing the configuration files in TextMate with no context
highlighting. This produced lots of really unnecessary errors. So, &lt;a href=&quot;http://www.github.com/brycem/asterisk-textmate-bundle&quot;&gt;I
decided to build a bundle from
scratch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s definitely a work in progress and I’d appreciate any work anyone
else would like to put into it&lt;/p&gt;
</description>
				<pubDate>Tue, 12 Jul 2011 00:00:00 -0400</pubDate>
				<link>http://www.brycemcdonnell.com/textmate-bundle-for-asterisk-telephony?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</link>
				<guid isPermaLink="true">http://www.brycemcdonnell.com/textmate-bundle-for-asterisk-telephony?utm_source=rss&amp;utm_medium=rss&amp;utm_medium=blogrss</guid>
			</item>
		
	</channel>
</rss>
